{"version":3,"sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactItem/ContactItem.styled.jsx","components/ContactList/ContactItem/ContactItem.jsx","components/ContactList/ContactList/ContactList.jsx","App.styled.jsx","hooks/useLocalStorage.js","App.jsx","index.js"],"names":["Form","styled","form","ContactForm","availabilityСheck","contactAdding","useState","name","setName","number","setNumber","handleChange","e","target","value","trim","console","log","onSubmit","preventDefault","id","uuidv4","type","pattern","title","required","onChange","Label","label","Filter","filter","ListItem","li","ContactItem","contactRemoving","onClick","ContactList","contacts","map","Container","div","useLocalStorage","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","App","setFilter","setContacts","filteredContacts","toLowerCase","includes","inputName","find","alert","newContact","prevState","elem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b782a7b0.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  width: 300px;\n  border: 2px solid #000;\n\n  label {\n    display: flex;\n    flex-direction: column;\n\n    &:not(:first-of-type) {\n      margin-top: 10px;\n    }\n  }\n\n  input {\n    margin-top: 4px;\n    width: 160px;\n\n    &:focus {\n      border: 2px solid #286fe0;\n      outline: none;\n    }\n  }\n\n  button {\n    margin-top: 20px;\n    padding: 4px;\n    max-width: 100px;\n    border: 0.2px solid #b7b7b7;\n    border-radius: 3px;\n    cursor: pointer;\n    transition: box-shadow 250ms linear, -webkit-box-shadow 250ms linear,\n      -moz-box-shadow 250ms linear;\n\n    &:hover {\n      -webkit-box-shadow: 0px 1px 3px 2px rgba(34, 60, 80, 0.2);\n      -moz-box-shadow: 0px 1px 3px 2px rgba(34, 60, 80, 0.2);\n      box-shadow: 0px 1px 3px 2px rgba(34, 60, 80, 0.2);\n    }\n\n    &:active {\n      color: #fff;\n      background-color: #286fe0;\n    }\n  }\n`;\n\nexport default Form;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport Form from './ContactForm.styled';\n\nconst ContactForm = ({ availabilityСheck, contactAdding }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  /*function for processing a form submission*/\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (availabilityСheck(name) || !name || !number) {\n      return;\n    }\n\n    contactAdding({ id: uuidv4(), name, number });\n    setName('');\n    setNumber('');\n  };\n\n  /*function for handling data input to input-elem*/\n  const handleChange = e => {\n    const name = e.target.name;\n\n    switch (name) {\n      case 'name':\n        setName(e.target.value.trim());\n        break;\n\n      case 'number':\n        setNumber(e.target.value.trim());\n        break;\n\n      default:\n        console.log('Oops! Something Went Wrong');\n    }\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleChange}\n          value={name}\n        />\n      </label>\n      <label>\n        Phone number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={handleChange}\n          value={number}\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  // handleChange: PropTypes.func.isRequired,\n  availabilityСheck: PropTypes.func.isRequired,\n  contactAdding: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nconst Label = styled.label`\n  display: flex;\n  flex-direction: column;\n\n  input {\n    margin-top: 4px;\n    width: 160px;\n\n    &:focus {\n      border: 2px solid #286fe0;\n      outline: none;\n    }\n  }\n`;\n\nexport default Label;\n","import PropTypes from 'prop-types';\nimport Label from './Filter.styled';\n\nconst Filter = ({ filter, handleChange }) => {\n  return (\n    <Label>\n      Find contacts by name\n      <input type=\"text\" name=\"filter\" onChange={handleChange} value={filter} />\n    </Label>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nconst ListItem = styled.li`\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  padding-left: 20px;\n\n  &:not(:last-of-type) {\n    margin-bottom: 12px;\n  }\n\n  ::before {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 50%;\n    transform: translateY(-50%);\n\n    width: 4px;\n    height: 4px;\n    background-color: #000;\n    border: 1px solid #000;\n    border-radius: 50%;\n  }\n\n  span {\n    display: inline-block;\n  }\n\n  button {\n    display: inline-block;\n    padding: 1px 4px;\n    margin-left: 10px;\n    border: 0.5px solid #b7b7b7;\n    border-radius: 4px;\n    font-size: 11px;\n    line-height: 1;\n\n    &:hover {\n      -webkit-box-shadow: 0px 1px 3px 2px rgba(34, 60, 80, 0.2);\n      -moz-box-shadow: 0px 1px 3px 2px rgba(34, 60, 80, 0.2);\n      box-shadow: 0px 1px 3px 2px rgba(34, 60, 80, 0.2);\n    }\n\n    &:active {\n      background-color: #286fe0;\n    }\n  }\n`;\n\nexport default ListItem;\n","import PropTypes from 'prop-types';\nimport ListItem from './ContactItem.styled';\n\nconst ContactItem = ({ id, name, number, contactRemoving }) => {\n  return (\n    <ListItem>\n      <span>{`${name}: ${number}`}</span>\n      <button type=\"button\" data-id={id} onClick={() => contactRemoving(id)}>\n        Delete\n      </button>\n    </ListItem>\n  );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  contactRemoving: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport ContactItem from '../ContactItem';\n\nconst ContactList = ({ contacts, contactRemoving }) => {\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <ContactItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          contactRemoving={contactRemoving}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n  contactRemoving: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nconst Container = styled.div`\n  padding: 60px;\n`;\n\nexport default Container;\n","import { useState, useEffect } from 'react';\n\nconst useLocalStorage = (key, defaultValue) => {\n  /*state init*/\n  const [state, setState] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\n  });\n\n  /*Changing local Storage data on every changes with contacts*/\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n};\n\nexport default useLocalStorage;\n","import { useState } from 'react';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList/ContactList';\nimport Container from './App.styled';\nimport useLocalStorage from './hooks/useLocalStorage';\n\nconst App = () => {\n  const [filter, setFilter] = useState('');\n  const [contacts, setContacts] = useLocalStorage('contacts', []);\n\n  /*function for adding an item to contacts*/\n  const contactAdding = newContact => {\n    setContacts(prevState => [...prevState, newContact]);\n  };\n\n  /*function for removing an item from contacts*/\n  const contactRemoving = id => {\n    setContacts(prevState => prevState.filter(elem => elem.id !== id));\n  };\n\n  /*function for checking the presence of a contact with the specified name*/\n  const availabilityСheck = inputName => {\n    const existingСontact = contacts.find(\n      ({ name }) => name.toLowerCase() === inputName.toLowerCase(),\n    );\n\n    if (existingСontact) {\n      alert(`${inputName} is already in contacts`);\n      return true;\n    }\n    return false;\n  };\n\n  /*function for handling data input to input-elem*/\n  const handleChange = e => {\n    setFilter(e.target.value.trim());\n  };\n\n  const filteredContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filter.toLowerCase()),\n  );\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm\n        availabilityСheck={availabilityСheck}\n        contactAdding={contactAdding}\n      />\n\n      <h2>Contacts</h2>\n      <Filter filter={filter} handleChange={handleChange} />\n      <ContactList\n        contacts={filteredContacts}\n        contactRemoving={contactRemoving}\n      />\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}